// Generated by CoffeeScript 1.6.1
(function() {
  var cmd_history, cmd_index, fill_autocomplete, fill_dom, log_cmd, run_cmd, show_history;

  cmd_history = [];

  cmd_index = null;

  $(document).ready(function() {
    var iframe_height, output_height;
    iframe_height = $(window).height() - 175;
    $("#sandbox").css('height', iframe_height);
    output_height = $(window).height() - 100;
    $("#output").css('min-height', output_height);
    fill_dom();
    fill_autocomplete(window);
    $("#cmd_input").keypress(function(ev) {
      var cmd_output, cmd_to_eval;
      if (ev.which === 13) {
        cmd_to_eval = $.trim($(this).val());
        if (cmd_to_eval === '') {
          return;
        }
        cmd_history.push(cmd_to_eval);
        cmd_output = run_cmd(cmd_to_eval);
        cmd_index = cmd_history.length;
        log_cmd(cmd_to_eval, cmd_output);
        return $(this).val('');
      }
    });
    $("#cmd_input").keyup(function(ev) {
      var cmd_to_eval, retval, sandbox_window;
      if (ev.which === 38 && $(".ac_results:visible").length === 0) {
        cmd_index--;
        if (cmd_index < 0) {
          cmd_index = 0;
        }
        return show_history();
      } else if (ev.which === 40 && $(".ac_results:visible").length === 0) {
        cmd_index++;
        if (cmd_index > cmd_history.length) {
          cmd_index = cmd_history.length;
        }
        return show_history();
      } else if (ev.which === 190) {
        cmd_to_eval = $.trim($(this).val().slice(0, -1));
        if (cmd_to_eval === '') {
          return;
        }
        sandbox_window = $("#sandbox")[0].contentWindow;
        try {
          retval = sandbox_window["eval"](cmd_to_eval);
        } catch (e) {
          retval = '';
        }
        return fill_autocomplete(retval);
      }
    });
    $("#script_input").keyup(function(ev) {
      var cmd_output, cmd_to_eval, script_url;
      if (ev.which !== 13) {
        return;
      }
      script_url = $.trim($(this).val());
      cmd_to_eval = "var head = document.getElementsByTagName('head')[0] || document.documentElement;						var script = document.createElement('script');						script.type = 'text/javascript';						script.src = '" + script_url + "';						head.appendChild(script);						if (script.readyState){							script.onreadystatechange = function () {								var state = this.readyState;								if (state === 'loaded' || state === 'complete') {									script.onreadystatechange = null;									top.log_cmd('Load Script " + script_url + "', 'Loaded');								}							};						} else {							script.onload = function(){								top.log_cmd('Load Script " + script_url + "', 'Loaded');							};						}						script.onerror = function(){							top.log_cmd('Load Script " + script_url + "', 'Failed');						};";
      cmd_output = run_cmd(cmd_to_eval);
      return $(this).val('');
    });
    $("#css_input").keyup(function(ev) {
      var cmd_output, cmd_to_eval, script_url;
      if (ev.which !== 13) {
        return;
      }
      script_url = $.trim($(this).val());
      cmd_to_eval = "var head = document.getElementsByTagName('head')[0] || document.documentElement;						var link = document.createElement('link');						link.type = 'text/css';						link.rel = 'stylesheet';						link.href = '" + script_url + "';						head.appendChild(link);						if (link.readyState){							link.onreadystatechange = function () {								var state = this.readyState;								if (state === 'loaded' || state === 'complete') {									link.onreadystatechange = null;									top.log_cmd('Load CSS " + script_url + "', 'Loaded');								}							};						} else {							link.onload = function(){								top.log_cmd('Load CSS " + script_url + "', 'Loaded');							};						}						link.onerror = function(){							top.log_cmd('Load CSS " + script_url + "', 'Failed');						};";
      cmd_output = run_cmd(cmd_to_eval);
      return $(this).val('');
    });
  });

  run_cmd = function(cmd_to_eval) {
    var k, obj_arr, retval, sandbox_window, v;
    sandbox_window = $("#sandbox")[0].contentWindow;
    try {
      retval = sandbox_window["eval"](cmd_to_eval);
      if ($.isFunction(retval)) {
        return retval;
      } else if ($.isArray(retval)) {
        return JSON.stringify(retval);
      } else if (typeof retval === 'object') {
        obj_arr = [];
        obj_arr.push(retval);
        for (k in retval) {
          v = retval[k];
          obj_arr.push("" + k + ": " + v);
        }
        return obj_arr.join('<br />');
      } else {
        return JSON.stringify(retval);
      }
    } catch (e) {
      return e;
    }
  };

  log_cmd = function(cmd_to_eval, cmd_output) {
    var a;
    a = $("<li class='text-info'>" + cmd_to_eval + "			<ul class='list-unstyled text-muted'>				<li class='op_' style='overflow:auto;'>" + cmd_output + "</li>			</ul>		</li>");
    a.find(".op_").jTruncate({
      length: 100
    });
    $("#output").prepend(a);
  };

  show_history = function() {
    var cmd_to_show;
    try {
      cmd_to_show = cmd_history[cmd_index];
      return $("#cmd_input").val(cmd_to_show);
    } catch (e) {
      return $("#cmd_input").val('');
    }
  };

  fill_autocomplete = function(obj) {
    var k, obj_arr, v;
    if (typeof obj === 'object') {
      obj_arr = [];
      for (k in obj) {
        v = obj[k];
        obj_arr.push(k);
      }
      $("#cmd_input").autocomplete(obj_arr, {
        autoFill: true,
        minChars: 0
      });
    }
  };

  fill_dom = function() {
    var dom_html;
    dom_html = "<h3>Welcome</h3>		<div>This place is to display output of the DOM manipulation command you try.</div>		<div>You can also load JS and CSS files here.</div>		<br />		<div>Jquery and Bootstrap are placed in path for your help. So you can directly try <b>jquery.js</b> or <b>bootstrap.css</b>.</div>		";
    return run_cmd("document.body.innerHTML = '" + dom_html + "'");
  };

  window.log_cmd = log_cmd;

}).call(this);
